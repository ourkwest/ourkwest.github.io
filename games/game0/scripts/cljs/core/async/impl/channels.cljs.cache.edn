;; Analyzed by ClojureScript 0.0-2719
{:defs {put-active? {:protocol-inline nil, :name cljs.core.async.impl.channels/put-active?, :variadic false, :file "release/scripts/cljs/core/async/impl/channels.cljs", :end-column 19, :method-params ([box]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([box])), :test true}, ->t19355 {:protocol-inline nil, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/->t19355, :variadic false, :file "release/scripts/cljs/core/async/impl/channels.cljs", :method-params ([val box meta19356]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async.impl.channels/t19355, :variadic false, :max-fixed-arity 3}), :line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([val box meta19356])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :test true}, chan {:protocol-inline nil, :name cljs.core.async.impl.channels/chan, :variadic false, :file "release/scripts/cljs/core/async/impl/channels.cljs", :end-column 12, :method-params ([buf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([buf])), :test true}, ->t19352 {:protocol-inline nil, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/->t19352, :variadic false, :file "release/scripts/cljs/core/async/impl/channels.cljs", :method-params ([val box meta19353]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async.impl.channels/t19352, :variadic false, :max-fixed-arity 3}), :line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([val box meta19353])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :test true}, box {:protocol-inline nil, :name cljs.core.async.impl.channels/box, :variadic false, :file "release/scripts/cljs/core/async/impl/channels.cljs", :end-column 11, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/t19355, :variadic false, :max-fixed-arity 1}), :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :test true}, ->PutBox {:protocol-inline nil, :protocols #{}, :name cljs.core.async.impl.channels/->PutBox, :variadic false, :file "release/scripts/cljs/core/async/impl/channels.cljs", :end-column 17, :method-params ([handler val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag cljs.core.async.impl.channels/PutBox, :variadic false, :max-fixed-arity 2}), :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handler val])), :skip-protocol-flag nil, :test true}, t19355 {:num-fields 3, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/t19355, :file "release/scripts/cljs/core/async/impl/channels.cljs", :type true, :anonymous true, :column 3, :line 17, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, t19352 {:num-fields 3, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/t19352, :file "release/scripts/cljs/core/async/impl/channels.cljs", :type true, :anonymous true, :column 3, :line 17, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, MAX_DIRTY {:file "release/scripts/cljs/core/async/impl/channels.cljs", :line 25, :column 1, :end-line 25, :end-column 24, :const true, :test true, :name cljs.core.async.impl.channels/MAX_DIRTY}, ManyToManyChannel {:num-fields 6, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort}, :name cljs.core.async.impl.channels/ManyToManyChannel, :file "release/scripts/cljs/core/async/impl/channels.cljs", :end-column 28, :type true, :column 10, :line 27, :record false, :end-line 27, :skip-protocol-flag nil}, ->ManyToManyChannel {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort}, :name cljs.core.async.impl.channels/->ManyToManyChannel, :variadic false, :file "release/scripts/cljs/core/async/impl/channels.cljs", :end-column 28, :method-params ([takes dirty-takes puts dirty-puts buf closed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 6}), :line 27, :end-line 27, :max-fixed-arity 6, :fn-var true, :arglists (quote ([takes dirty-takes puts dirty-puts buf closed])), :skip-protocol-flag nil, :test true}, PutBox {:num-fields 2, :protocols #{}, :name cljs.core.async.impl.channels/PutBox, :file "release/scripts/cljs/core/async/impl/channels.cljs", :end-column 17, :type true, :column 10, :line 20, :record false, :end-line 20, :skip-protocol-flag nil}}, :name cljs.core.async.impl.channels, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {buffers cljs.core.async.impl.buffers, cljs.core.async.impl.buffers cljs.core.async.impl.buffers, dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, impl cljs.core.async.impl.protocols}, :imports nil}