;; Analyzed by ClojureScript 0.0-2719
{:defs {queue-delay {:protocol-inline nil, :name cljs.core.async.impl.dispatch/queue-delay, :variadic false, :file "release/scripts/cljs/core/async/impl/dispatch.cljs", :end-column 19, :method-params ([f delay]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f delay])), :test true}, run {:protocol-inline nil, :name cljs.core.async.impl.dispatch/run, :variadic false, :file "release/scripts/cljs/core/async/impl/dispatch.cljs", :end-column 11, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, process-messages {:protocol-inline nil, :name cljs.core.async.impl.dispatch/process-messages, :variadic false, :file "release/scripts/cljs/core/async/impl/dispatch.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 0}), :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, queue-dispatcher {:protocol-inline nil, :name cljs.core.async.impl.dispatch/queue-dispatcher, :variadic false, :file "release/scripts/cljs/core/async/impl/dispatch.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 0}), :line 32, :end-line 32, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, TASK_BATCH_SIZE {:file "release/scripts/cljs/core/async/impl/dispatch.cljs", :line 9, :column 1, :end-line 9, :end-column 22, :test true, :name cljs.core.async.impl.dispatch/TASK_BATCH_SIZE}, queued? {:file "release/scripts/cljs/core/async/impl/dispatch.cljs", :line 7, :column 1, :end-line 7, :end-column 24, :boolean true, :test true, :name cljs.core.async.impl.dispatch/queued?}, running? {:file "release/scripts/cljs/core/async/impl/dispatch.cljs", :line 6, :column 1, :end-line 6, :end-column 25, :boolean true, :test true, :name cljs.core.async.impl.dispatch/running?}, tasks {:file "release/scripts/cljs/core/async/impl/dispatch.cljs", :line 5, :column 1, :end-line 5, :end-column 12, :test true, :name cljs.core.async.impl.dispatch/tasks}, message-channel {:file "release/scripts/cljs/core/async/impl/dispatch.cljs", :line 4, :column 1, :end-line 4, :end-column 22, :test true, :name cljs.core.async.impl.dispatch/message-channel}}, :name cljs.core.async.impl.dispatch, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {cljs.core.async.impl.buffers cljs.core.async.impl.buffers, buffers cljs.core.async.impl.buffers}, :imports nil}