;; Analyzed by ClojureScript 0.0-2719
{:defs {scale-factor {:protocol-inline nil, :name cljstemplate.shape/scale-factor, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 20, :method-params ([w h max-w max-h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 4}), :line 358, :end-line 358, :max-fixed-arity 4, :fn-var true, :arglists (quote ([w h max-w max-h])), :test true}, stroke-circle {:protocol-inline nil, :name cljstemplate.shape/stroke-circle, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 21, :method-params ([surface coords colour]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 383, :end-line 383, :max-fixed-arity 3, :fn-var true, :arglists (quote ([surface coords colour])), :test true}, populate-shape-connections {:protocol-inline nil, :name cljstemplate.shape/populate-shape-connections, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 34, :method-params ([shapes p__17539]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([shapes [[shape-id channel-id wire-id direction-id] & seeds]])), :test true}, pads {:file "src/cljstemplate/shape.cljs", :line 179, :column 1, :end-line 179, :end-column 11, :test true, :name cljstemplate.shape/pads}, switch-on {:protocol-inline nil, :name cljstemplate.shape/switch-on, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 17, :method-params ([shape channel-id wire-id direction-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 4}), :line 53, :end-line 53, :max-fixed-arity 4, :fn-var true, :arglists (quote ([shape channel-id wire-id direction-id])), :test true}, log {:file "src/cljstemplate/shape.cljs", :line 14, :column 1, :end-line 14, :end-column 10, :test true, :name cljstemplate.shape/log}, seeds-from {:protocol-inline nil, :name cljstemplate.shape/seeds-from, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 18, :method-params ([shapes shape-id from-shape-id channel-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 4}), :line 66, :end-line 66, :max-fixed-arity 4, :fn-var true, :arglists (quote ([shapes shape-id from-shape-id channel-id])), :test true}, wire-index-select {:protocol-inline nil, :name cljstemplate.shape/wire-index-select, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 25, :method-params ([target p__17532 index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{cljs.core/IVector clj-nil}, :variadic false, :max-fixed-arity 3}), :line 56, :end-line 56, :max-fixed-arity 3, :fn-var true, :arglists (quote ([target [from onto [backward forward]] index])), :test true}, seed-lights {:protocol-inline nil, :name cljstemplate.shape/seed-lights, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 19, :method-params ([level shape-id channel-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 3}), :line 96, :end-line 96, :max-fixed-arity 3, :fn-var true, :arglists (quote ([level shape-id channel-id])), :test true}, render-in-motion {:protocol-inline nil, :name cljstemplate.shape/render-in-motion, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 24, :method-params ([context sf offset mouse channels colours ends timestamp shape id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 10}), :line 368, :end-line 368, :max-fixed-arity 10, :fn-var true, :arglists (quote ([context sf offset mouse channels colours ends timestamp shape id])), :test true}, seed-light {:protocol-inline nil, :name cljstemplate.shape/seed-light, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 18, :method-params ([level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([level])), :test true}, clear-shape-connections {:protocol-inline nil, :name cljstemplate.shape/clear-shape-connections, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 31, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape])), :test true}, clear-channel-connections {:protocol-inline nil, :name cljstemplate.shape/clear-channel-connections, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 33, :method-params ([channel-wires]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([channel-wires])), :test true}, clear-connections {:protocol-inline nil, :name cljstemplate.shape/clear-connections, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 25, :method-params ([level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([level])), :test true}, render-attention {:protocol-inline nil, :name cljstemplate.shape/render-attention, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 24, :method-params ([key context x y radius timestamp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 6}), :line 495, :end-line 495, :max-fixed-arity 6, :fn-var true, :arglists (quote ([key context x y radius timestamp])), :test true}, check-connections {:protocol-inline nil, :name cljstemplate.shape/check-connections, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 25, :method-params ([level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([level])), :test true}, trace-path {:protocol-inline nil, :name cljstemplate.shape/trace-path, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 18, :method-params ([context p__17587]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 200, :end-line 200, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context [[x1 y1] & rest]])), :test true}, rotated {:protocol-inline nil, :name cljstemplate.shape/rotated, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 15, :method-params ([timestamp p__17555]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj any}, :variadic false, :max-fixed-arity 2}), :line 128, :end-line 128, :max-fixed-arity 2, :fn-var true, :arglists (quote ([timestamp {{start :start, end :end, start-time :start-time, end-time :end-time} :rotation, :as shape}])), :test true}, attention-gradient {:protocol-inline nil, :name cljstemplate.shape/attention-gradient, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 26, :method-params ([key context x y radius]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 5}), :line 482, :end-line 482, :max-fixed-arity 5, :fn-var true, :arglists (quote ([key context x y radius])), :test true}, vertices {:protocol-inline nil, :name cljstemplate.shape/vertices, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 16, :method-params ([p__17573 xs ys sf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 4}), :line 190, :end-line 190, :max-fixed-arity 4, :fn-var true, :arglists (quote ([{n :n, [x y r] :location, rotation :rotation} xs ys sf])), :test true}, mk-gradient {:protocol-inline nil, :name cljstemplate.shape/mk-gradient, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 19, :method-params ([key context x y radius]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 5}), :line 475, :end-line 475, :max-fixed-arity 5, :fn-var true, :arglists (quote ([key context x y radius])), :test true}, render-start {:protocol-inline nil, :name cljstemplate.shape/render-start, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 20, :method-params ([p__18176 context timestamp p__18177 sf p__18178]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 6}), :line 392, :end-line 392, :max-fixed-arity 6, :fn-var true, :arglists (quote ([{shapes :shapes, [start _ _] :start, channels :channels, :as level} context timestamp [_ bdr _] sf [x-offset y-offset]])), :test true}, more-seeds {:protocol-inline nil, :name cljstemplate.shape/more-seeds, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 18, :method-params ([shapes shape-id channel-id wire-id direction-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{clj clj-nil}, :variadic false, :max-fixed-arity 5}), :line 78, :end-line 78, :max-fixed-arity 5, :fn-var true, :arglists (quote ([shapes shape-id channel-id wire-id direction-id])), :test true}, populate-connections {:protocol-inline nil, :name cljstemplate.shape/populate-connections, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 28, :method-params ([level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([level])), :test true}, gradients {:file "src/cljstemplate/shape.cljs", :line 473, :column 1, :end-line 473, :end-column 16, :test true, :name cljstemplate.shape/gradients}, radii {:file "src/cljstemplate/shape.cljs", :line 171, :column 1, :end-line 171, :end-column 12, :test true, :name cljstemplate.shape/radii}, clicked {:protocol-inline nil, :name cljstemplate.shape/clicked, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 15, :method-params ([shape p__17561]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 146, :end-line 146, :max-fixed-arity 2, :fn-var true, :arglists (quote ([shape [_ _ _ timestamp]])), :test true}, render-shape {:protocol-inline nil, :name cljstemplate.shape/render-shape, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 20, :method-params ([context sf p__17631 p__17632 channels p__17633 p__17634 id timestamp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 9}), :line 222, :end-line 222, :max-fixed-arity 9, :fn-var true, :arglists (quote ([context sf [x-offset y-offset] [mx my :as mouse] channels [_ bdr fg] {[x y r] :location, n :n, rotation :rotation, wiring :wiring, :as shape} id timestamp])), :test true}, inner-radii {:file "src/cljstemplate/shape.cljs", :line 175, :column 1, :end-line 175, :end-column 18, :test true, :name cljstemplate.shape/inner-radii}, debug {:file "src/cljstemplate/shape.cljs", :line 16, :column 1, :end-line 16, :end-column 12, :test true, :name cljstemplate.shape/debug}, alphas {:file "src/cljstemplate/shape.cljs", :line 167, :column 1, :end-line 167, :end-column 13, :test true, :name cljstemplate.shape/alphas}, click-result {:protocol-inline nil, :name cljstemplate.shape/click-result, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 20, :method-params ([shape context click]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 3}), :line 184, :end-line 184, :max-fixed-arity 3, :fn-var true, :arglists (quote ([shape context click])), :test true}, render-at-rest {:protocol-inline nil, :name cljstemplate.shape/render-at-rest, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 22, :method-params ([context sf offset mouse channels colours ends timestamp shape id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 10}), :line 363, :end-line 363, :max-fixed-arity 10, :fn-var true, :arglists (quote ([context sf offset mouse channels colours ends timestamp shape id])), :test true}, render {:protocol-inline nil, :name cljstemplate.shape/render, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 14, :method-params ([p__18372 level mouse timestamp done]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 5}), :line 507, :end-line 507, :max-fixed-arity 5, :fn-var true, :arglists (quote ([[context width height] level mouse timestamp done])), :test true}, rgba-str {:protocol-inline nil, :name cljstemplate.shape/rgba-str, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 16, :method-params ([p__17567]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[r g b a]])), :test true}, not-rotating? {:protocol-inline nil, :name cljstemplate.shape/not-rotating?, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 21, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape])), :test true}, find-wires {:protocol-inline nil, :name cljstemplate.shape/find-wires, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 18, :method-params ([target wires]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :line 62, :end-line 62, :max-fixed-arity 2, :fn-var true, :arglists (quote ([target wires])), :test true}, do-rotations {:protocol-inline nil, :name cljstemplate.shape/do-rotations, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 20, :method-params ([timestamp level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 135, :end-line 135, :max-fixed-arity 2, :fn-var true, :arglists (quote ([timestamp level])), :test true}, path-lengths {:file "src/cljstemplate/shape.cljs", :line 208, :column 1, :end-line 208, :end-column 19, :test true, :name cljstemplate.shape/path-lengths}, fill-circle {:protocol-inline nil, :name cljstemplate.shape/fill-circle, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 19, :method-params ([surface coords colour]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 375, :end-line 375, :max-fixed-arity 3, :fn-var true, :arglists (quote ([surface coords colour])), :test true}, clear-wire-connections {:protocol-inline nil, :name cljstemplate.shape/clear-wire-connections, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 30, :method-params ([p__17527]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[in out _ _]])), :test true}, index-of {:protocol-inline nil, :name cljstemplate.shape/index-of, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 16, :method-params ([s v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{number clj-nil}, :variadic false, :max-fixed-arity 2}), :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s v])), :test true}, rgb-str {:protocol-inline nil, :name cljstemplate.shape/rgb-str, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 15, :method-params ([p__17564]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 161, :end-line 161, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[r g b]])), :test true}, rotating? {:file "src/cljstemplate/shape.cljs", :line 32, :column 1, :end-line 32, :end-column 16, :test true, :name cljstemplate.shape/rotating?}, render-end {:protocol-inline nil, :name cljstemplate.shape/render-end, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 18, :method-params ([p__18236 context timestamp p__18237 sf p__18238 done]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 7}), :line 422, :end-line 422, :max-fixed-arity 7, :fn-var true, :arglists (quote ([{shapes :shapes, [end _ _] :end, channels :channels, :as level} context timestamp [_ bdr fg] sf [x-offset y-offset] done])), :test true}, proportionalise {:protocol-inline nil, :name cljstemplate.shape/proportionalise, :variadic false, :file "src/cljstemplate/shape.cljs", :end-column 23, :method-params ([p__17549 p__17550]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :line 118, :end-line 118, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[a b c] [d f]])), :doc "returns e", :test true}}, :name cljstemplate.shape, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses {TAU_3RD cljstemplate.constance, square-pad cljstemplate.shapeconstance, oct-inner-radius cljstemplate.shapeconstance, TAU_4TH cljstemplate.constance, close! cljs.core.async, log-when-changes cljstemplate.logging, TAU_6TH cljstemplate.constance, square-inner-radius cljstemplate.shapeconstance, TAU_8TH cljstemplate.constance, hex-inner-radius cljstemplate.shapeconstance, TAU_12TH cljstemplate.constance, tri-inner-radius cljstemplate.shapeconstance, square-radius cljstemplate.shapeconstance, oct-pad cljstemplate.shapeconstance, PI cljstemplate.constance, hex-pad cljstemplate.shapeconstance, shape-side-length cljstemplate.shapeconstance, TAU cljstemplate.constance, ROOT_TWO cljstemplate.constance, tri-radius cljstemplate.shapeconstance, oct-radius cljstemplate.shapeconstance, ROOT_THREE cljstemplate.constance, logger cljstemplate.logging, hex-radius cljstemplate.shapeconstance, put! cljs.core.async, tri-pad cljstemplate.shapeconstance}, :requires {cljs.core.async cljs.core.async, cljstemplate.shapeconstance cljstemplate.shapeconstance, cljstemplate.constance cljstemplate.constance, cljstemplate.logging cljstemplate.logging}, :imports nil}