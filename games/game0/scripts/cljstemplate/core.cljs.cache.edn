;; Analyzed by ClojureScript 0.0-2719
{:defs {reset-canvas {:protocol-inline nil, :name cljstemplate.core/reset-canvas, :variadic false, :file "src/cljstemplate/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 0}), :line 107, :end-line 107, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, level-up {:protocol-inline nil, :name cljstemplate.core/level-up, :variadic false, :file "src/cljstemplate/core.cljs", :end-column 16, :method-params ([level-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 174, :end-line 174, :max-fixed-arity 1, :fn-var true, :arglists (quote ([level-fn])), :test true}, log {:file "src/cljstemplate/core.cljs", :line 24, :column 1, :end-line 24, :end-column 10, :test true, :name cljstemplate.core/log}, handle-moves {:protocol-inline nil, :name cljstemplate.core/handle-moves, :variadic false, :file "src/cljstemplate/core.cljs", :end-column 20, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event])), :test true}, done-fn {:protocol-inline nil, :name cljstemplate.core/done-fn, :variadic false, :file "src/cljstemplate/core.cljs", :end-column 15, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg])), :test true}, level-checked {:file "src/cljstemplate/core.cljs", :line 101, :column 1, :end-line 101, :end-column 20, :test true, :name cljstemplate.core/level-checked}, clear {:protocol-inline nil, :name cljstemplate.core/clear, :variadic false, :file "src/cljstemplate/core.cljs", :end-column 13, :method-params ([p__6725 color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[surface w h] color])), :test true}, done {:file "src/cljstemplate/core.cljs", :line 103, :column 1, :end-line 103, :end-column 11, :test true, :name cljstemplate.core/done}, pointer-state {:file "src/cljstemplate/core.cljs", :line 65, :column 1, :end-line 65, :end-column 20, :test true, :name cljstemplate.core/pointer-state}, shuffles-so-far {:file "src/cljstemplate/core.cljs", :line 102, :column 1, :end-line 102, :end-column 22, :test true, :name cljstemplate.core/shuffles-so-far}, animate {:protocol-inline nil, :name cljstemplate.core/animate, :variadic false, :file "src/cljstemplate/core.cljs", :end-column 15, :method-params ([timestamp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([timestamp])), :test true}, handle-click {:protocol-inline nil, :name cljstemplate.core/handle-click, :variadic false, :file "src/cljstemplate/core.cljs", :end-column 20, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event])), :test true}, canvas {:file "src/cljstemplate/core.cljs", :line 115, :column 5, :end-line 115, :end-column 17, :test true, :name cljstemplate.core/canvas}, begin {:protocol-inline nil, :name cljstemplate.core/begin, :variadic false, :file "src/cljstemplate/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 189, :end-line 189, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, per-frame-processing {:protocol-inline nil, :name cljstemplate.core/per-frame-processing, :variadic false, :file "src/cljstemplate/core.cljs", :end-column 28, :method-params ([timestamp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([timestamp])), :test true}, listen {:protocol-inline nil, :name cljstemplate.core/listen, :variadic false, :file "src/cljstemplate/core.cljs", :end-column 14, :method-params ([el type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([el type])), :test true}, this-level {:file "src/cljstemplate/core.cljs", :line 100, :column 1, :end-line 100, :end-column 17, :test true, :name cljstemplate.core/this-level}, this-level-id {:file "src/cljstemplate/core.cljs", :line 99, :column 1, :end-line 99, :end-column 20, :test true, :name cljstemplate.core/this-level-id}, handle-msg {:protocol-inline nil, :name cljstemplate.core/handle-msg, :variadic false, :file "src/cljstemplate/core.cljs", :end-column 18, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg])), :test true}, fill-rect {:protocol-inline nil, :name cljstemplate.core/fill-rect, :variadic false, :file "src/cljstemplate/core.cljs", :end-column 17, :method-params ([p__6716 p__6717 p__6718]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 126, :end-line 126, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[surface] [x y width height] [r g b]])), :test true}}, :name cljstemplate.core, :doc nil, :excludes #{}, :use-macros {go cljs.core.async.macros}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :uses {TAU_3RD cljstemplate.constance, square-pad cljstemplate.shapeconstance, get-level cljstemplate.levels, <! cljs.core.async, TAU_4TH cljstemplate.constance, close! cljs.core.async, check-connections cljstemplate.shape, chan cljs.core.async, log-when-changes cljstemplate.logging, TAU_6TH cljstemplate.constance, TAU_8TH cljstemplate.constance, TAU_12TH cljstemplate.constance, square-radius cljstemplate.shapeconstance, PI cljstemplate.constance, hex-pad cljstemplate.shapeconstance, TAU cljstemplate.constance, ROOT_TWO cljstemplate.constance, tri-radius cljstemplate.shapeconstance, render cljstemplate.shape, ROOT_THREE cljstemplate.constance, shuffle-shapes cljstemplate.levels, do-rotations cljstemplate.shape, logger cljstemplate.logging, hex-radius cljstemplate.shapeconstance, put! cljs.core.async, tri-pad cljstemplate.shapeconstance}, :requires {goog.dom goog.dom, Uri goog.Uri, dom goog.dom, cljstemplate.shapeconstance cljstemplate.shapeconstance, cljs.core.async cljs.core.async, events goog.events, cljstemplate.levels cljstemplate.levels, cljstemplate.constance cljstemplate.constance, goog.events goog.events, cljstemplate.shape cljstemplate.shape, cljstemplate.logging cljstemplate.logging}, :imports {Uri goog.Uri}}