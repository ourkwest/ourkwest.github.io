;; Analyzed by ClojureScript 0.0-2719
{:defs {round-shapes {:protocol-inline nil, :name cljstemplate.levels/round-shapes, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 20, :method-params ([shapes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shapes])), :test true}, pads {:file "src/cljstemplate/levels.cljs", :line 32, :column 1, :end-line 32, :end-column 11, :test true, :name cljstemplate.levels/pads}, round-location {:protocol-inline nil, :name cljstemplate.levels/round-location, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 22, :method-params ([p__49163]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[x y r]])), :test true}, log {:file "src/cljstemplate/levels.cljs", :line 15, :column 1, :end-line 15, :end-column 10, :test true, :name cljstemplate.levels/log}, get-level {:protocol-inline nil, :name cljstemplate.levels/get-level, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 17, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{clj any}, :variadic false, :max-fixed-arity 1}), :line 559, :end-line 559, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :test true}, black-cmy-3 {:file "src/cljstemplate/levels.cljs", :line 308, :column 1, :end-line 308, :end-column 18, :test true, :name cljstemplate.levels/black-cmy-3}, add-wires {:protocol-inline nil, :name cljstemplate.levels/add-wires, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 17, :method-params ([shapes channel-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([shapes channel-count])), :test true}, endpoint-wiring {:protocol-inline nil, :name cljstemplate.levels/endpoint-wiring, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 23, :method-params ([channel-count direction shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 3}), :line 127, :end-line 127, :max-fixed-arity 3, :fn-var true, :arglists (quote ([channel-count direction shape])), :test true}, orange-blue-2 {:file "src/cljstemplate/levels.cljs", :line 298, :column 1, :end-line 298, :end-column 20, :test true, :name cljstemplate.levels/orange-blue-2}, centre {:protocol-inline nil, :name cljstemplate.levels/centre, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 14, :method-params ([shapes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shapes])), :test true}, all-colours {:file "src/cljstemplate/levels.cljs", :line 313, :column 1, :end-line 313, :end-column 18, :test true, :name cljstemplate.levels/all-colours}, finish-level {:protocol-inline nil, :name cljstemplate.levels/finish-level, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 20, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 552, :end-line 552, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :test true}, red-white-3 {:file "src/cljstemplate/levels.cljs", :line 305, :column 1, :end-line 305, :end-column 18, :test true, :name cljstemplate.levels/red-white-3}, path {:protocol-inline nil, :name cljstemplate.levels/path, :variadic true, :file "src/cljstemplate/levels.cljs", :end-column 12, :method-params ([location steps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic true, :max-fixed-arity 1}), :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([location & steps])), :test true}, end-messages {:file "src/cljstemplate/levels.cljs", :line 533, :column 1, :end-line 533, :end-column 19, :test true, :name cljstemplate.levels/end-messages}, shuffle {:protocol-inline nil, :name cljstemplate.levels/shuffle, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 15, :method-params ([shapes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 174, :end-line 174, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shapes])), :test true}, angles {:file "src/cljstemplate/levels.cljs", :line 37, :column 1, :end-line 37, :end-column 13, :test true, :name cljstemplate.levels/angles}, spam-each {:protocol-inline nil, :name cljstemplate.levels/spam-each, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 17, :method-params ([p__49329]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 271, :end-line 271, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{wiring :wiring, n :n, :as shape}])), :test true}, find-neighbours {:protocol-inline nil, :name cljstemplate.levels/find-neighbours, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 23, :method-params ([shapes p__49282]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 161, :end-line 161, :max-fixed-arity 2, :fn-var true, :arglists (quote ([shapes [x y shape]])), :test true}, orange-blue-3 {:file "src/cljstemplate/levels.cljs", :line 297, :column 1, :end-line 297, :end-column 20, :test true, :name cljstemplate.levels/orange-blue-3}, wire-paths {:protocol-inline nil, :name cljstemplate.levels/wire-paths, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 18, :method-params ([p__49341]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 288, :end-line 288, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{[start] :start, [end] :end, shapes :shapes, channels :channels, :as level}])), :test true}, start-messages {:file "src/cljstemplate/levels.cljs", :line 524, :column 1, :end-line 524, :end-column 21, :test true, :name cljstemplate.levels/start-messages}, apply-step {:protocol-inline nil, :name cljstemplate.levels/apply-step, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 18, :method-params ([p__49137 p__49138]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[x y rotation] [angle distance]])), :test true}, add-shape-wires {:protocol-inline nil, :name cljstemplate.levels/add-shape-wires, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 23, :method-params ([channel-count shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([channel-count shape])), :test true}, merge-spam {:protocol-inline nil, :name cljstemplate.levels/merge-spam, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 18, :method-params ([shape p__49321]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 257, :end-line 257, :max-fixed-arity 2, :fn-var true, :arglists (quote ([shape [channel from onto]])), :test true}, blank-wires {:protocol-inline nil, :name cljstemplate.levels/blank-wires, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 19, :method-params ([shapes channel-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists (quote ([shapes channel-count])), :test true}, add-random-msg {:protocol-inline nil, :name cljstemplate.levels/add-random-msg, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 22, :method-params ([level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 543, :end-line 543, :max-fixed-arity 1, :fn-var true, :arglists (quote ([level])), :test true}, add-endpoint-wiring {:protocol-inline nil, :name cljstemplate.levels/add-endpoint-wiring, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 27, :method-params ([shapes shape-id channel-count direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 4}), :line 140, :end-line 140, :max-fixed-arity 4, :fn-var true, :arglists (quote ([shapes shape-id channel-count direction])), :test true}, wire {:protocol-inline nil, :name cljstemplate.levels/wire, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 12, :method-params ([level shape-id wiring]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 3}), :line 171, :end-line 171, :max-fixed-arity 3, :fn-var true, :arglists (quote ([level shape-id wiring])), :test true}, add-blank-wires {:protocol-inline nil, :name cljstemplate.levels/add-blank-wires, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 23, :method-params ([channel-count shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists (quote ([channel-count shape])), :test true}, add-neighbours {:protocol-inline nil, :name cljstemplate.levels/add-neighbours, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 22, :method-params ([shapes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 167, :end-line 167, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shapes])), :test true}, tutorial-levels {:file "src/cljstemplate/levels.cljs", :line 324, :column 1, :end-line 324, :end-column 22, :test true, :name cljstemplate.levels/tutorial-levels}, add-path-to-end {:protocol-inline nil, :name cljstemplate.levels/add-path-to-end, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 23, :method-params ([here-id from-shape-id end-id travelled shapes channel-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 6}), :line 234, :end-line 234, :max-fixed-arity 6, :fn-var true, :arglists (quote ([here-id from-shape-id end-id travelled shapes channel-id])), :test true}, red-white {:file "src/cljstemplate/levels.cljs", :line 304, :column 1, :end-line 304, :end-column 16, :test true, :name cljstemplate.levels/red-white}, spam {:protocol-inline nil, :name cljstemplate.levels/spam, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 12, :method-params ([shapes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 285, :end-line 285, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shapes])), :test true}, mk-filter {:protocol-inline nil, :name cljstemplate.levels/mk-filter, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 17, :method-params ([collection]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 260, :end-line 260, :max-fixed-arity 1, :fn-var true, :arglists (quote ([collection])), :test true}, unfinished-levels {:file "src/cljstemplate/levels.cljs", :line 436, :column 1, :end-line 436, :end-column 24, :test true, :name cljstemplate.levels/unfinished-levels}, mk-level {:protocol-inline nil, :name cljstemplate.levels/mk-level, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 16, :method-params ([start-location data p__49297 colours channels]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 5}), :line 183, :end-line 183, :max-fixed-arity 5, :fn-var true, :arglists (quote ([start-location data [start-index end-index] colours channels])), :test true}, orange-blue {:file "src/cljstemplate/levels.cljs", :line 296, :column 1, :end-line 296, :end-column 18, :test true, :name cljstemplate.levels/orange-blue}, close-enough {:protocol-inline nil, :name cljstemplate.levels/close-enough, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 20, :method-params ([p__49276 p__49277]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 153, :end-line 153, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[x1 y1] [x2 y2]])), :test true}, black-cmy {:file "src/cljstemplate/levels.cljs", :line 307, :column 1, :end-line 307, :end-column 16, :test true, :name cljstemplate.levels/black-cmy}, mk-shapes {:protocol-inline nil, :name cljstemplate.levels/mk-shapes, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 17, :method-params ([shapes p__49148 p__49149]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{clj any}, :variadic false, :max-fixed-arity 3}), :line 43, :end-line 43, :max-fixed-arity 3, :fn-var true, :arglists (quote ([shapes [x y r] [n neighbours & rest]])), :test true}, add-distance {:protocol-inline nil, :name cljstemplate.levels/add-distance, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 20, :method-params ([distance ends p__49302]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj any}, :variadic false, :max-fixed-arity 3}), :line 208, :end-line 208, :max-fixed-arity 3, :fn-var true, :arglists (quote ([distance ends {dte :temp-dte, neighbours :neighbours, :as shape}])), :test true}, get-sides {:protocol-inline nil, :name cljstemplate.levels/get-sides, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 17, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 144, :end-line 144, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape])), :test true}, white-rgb-3 {:file "src/cljstemplate/levels.cljs", :line 311, :column 1, :end-line 311, :end-column 18, :test true, :name cljstemplate.levels/white-rgb-3}, add-distance-to-end {:protocol-inline nil, :name cljstemplate.levels/add-distance-to-end, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 27, :method-params ([shapes distance ends]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 3}), :line 218, :end-line 218, :max-fixed-arity 3, :fn-var true, :arglists (quote ([shapes distance ends])), :test true}, de-dupe-spam {:protocol-inline nil, :name cljstemplate.levels/de-dupe-spam, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 20, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 268, :end-line 268, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape])), :test true}, add-msgs {:protocol-inline nil, :name cljstemplate.levels/add-msgs, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 16, :method-params ([level start-msg end-msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 3}), :line 202, :end-line 202, :max-fixed-arity 3, :fn-var true, :arglists (quote ([level start-msg end-msg])), :test true}, purple-green {:file "src/cljstemplate/levels.cljs", :line 301, :column 1, :end-line 301, :end-column 19, :test true, :name cljstemplate.levels/purple-green}, translate-each {:protocol-inline nil, :name cljstemplate.levels/translate-each, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 22, :method-params ([by-x by-y shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 3}), :line 83, :end-line 83, :max-fixed-arity 3, :fn-var true, :arglists (quote ([by-x by-y shape])), :test true}, has-distance {:protocol-inline nil, :name cljstemplate.levels/has-distance, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 20, :method-params ([distance ends p__49305 id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 4}), :line 213, :end-line 213, :max-fixed-arity 4, :fn-var true, :arglists (quote ([distance ends {dte :temp-dte, neighbours :neighbours} id])), :test true}, un-shuffle {:protocol-inline nil, :name cljstemplate.levels/un-shuffle, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 18, :method-params ([shapes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 177, :end-line 177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shapes])), :test true}, finish {:protocol-inline nil, :name cljstemplate.levels/finish, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 14, :method-params ([level channel-count p__49348]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 3}), :line 547, :end-line 547, :max-fixed-arity 3, :fn-var true, :arglists (quote ([level channel-count [colours channels]])), :test true}, white-rgb {:file "src/cljstemplate/levels.cljs", :line 310, :column 1, :end-line 310, :end-column 16, :test true, :name cljstemplate.levels/white-rgb}, de-dupe-channel-spam {:protocol-inline nil, :name cljstemplate.levels/de-dupe-channel-spam, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 28, :method-params ([channel-wiring]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 263, :end-line 263, :max-fixed-arity 1, :fn-var true, :arglists (quote ([channel-wiring])), :test true}, shuffle-shapes {:protocol-inline nil, :name cljstemplate.levels/shuffle-shapes, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 22, :method-params ([level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 180, :end-line 180, :max-fixed-arity 1, :fn-var true, :arglists (quote ([level])), :test true}, padding {:file "src/cljstemplate/levels.cljs", :line 91, :column 1, :end-line 91, :end-column 14, :test true, :name cljstemplate.levels/padding}, purple-green-3 {:file "src/cljstemplate/levels.cljs", :line 302, :column 1, :end-line 302, :end-column 21, :test true, :name cljstemplate.levels/purple-green-3}, index-of {:protocol-inline nil, :name cljstemplate.levels/index-of, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 16, :method-params ([s v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{number clj-nil}, :variadic false, :max-fixed-arity 2}), :line 227, :end-line 227, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s v])), :test true}, translate {:protocol-inline nil, :name cljstemplate.levels/translate, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 17, :method-params ([shapes by-x by-y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 3}), :line 88, :end-line 88, :max-fixed-arity 3, :fn-var true, :arglists (quote ([shapes by-x by-y])), :test true}, round2 {:protocol-inline nil, :name cljstemplate.levels/round2, :variadic false, :file "src/cljstemplate/levels.cljs", :end-column 14, :method-params ([precision d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([precision d])), :doc "Round a double to the given precision (number of significant digits)", :test true}, orange-blue-1 {:file "src/cljstemplate/levels.cljs", :line 299, :column 1, :end-line 299, :end-column 20, :test true, :name cljstemplate.levels/orange-blue-1}}, :name cljstemplate.levels, :doc nil, :excludes #{shuffle}, :use-macros nil, :require-macros nil, :uses {TAU_3RD cljstemplate.constance, square-pad cljstemplate.shapeconstance, oct-inner-radius cljstemplate.shapeconstance, TAU_4TH cljstemplate.constance, log-when-changes cljstemplate.logging, TAU_6TH cljstemplate.constance, square-inner-radius cljstemplate.shapeconstance, TAU_8TH cljstemplate.constance, hex-inner-radius cljstemplate.shapeconstance, TAU_12TH cljstemplate.constance, tri-inner-radius cljstemplate.shapeconstance, square-radius cljstemplate.shapeconstance, oct-pad cljstemplate.shapeconstance, PI cljstemplate.constance, hex-pad cljstemplate.shapeconstance, shape-side-length cljstemplate.shapeconstance, TAU cljstemplate.constance, ROOT_TWO cljstemplate.constance, tri-radius cljstemplate.shapeconstance, oct-radius cljstemplate.shapeconstance, ROOT_THREE cljstemplate.constance, logger cljstemplate.logging, hex-radius cljstemplate.shapeconstance, tri-pad cljstemplate.shapeconstance}, :requires {cljstemplate.shapeconstance cljstemplate.shapeconstance, cljstemplate.constance cljstemplate.constance, cljstemplate.logging cljstemplate.logging}, :imports nil}